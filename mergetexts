import React, { useState, useCallback } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import { File, FilePlus, Merge, AlertCircle, CheckCircle, Loader2 } from 'lucide-react';
import { cn } from "@/lib/utils"

// Define the types
interface MergeTextsProps {
    primaryColor: string;
    secondaryColor: string;
    fontFamily: string;
}

const MergeTextsApp: React.FC<MergeTextsProps> = ({ primaryColor, secondaryColor, fontFamily }) => {
    const [file1Content, setFile1Content] = useState('');
    const [file2Content, setFile2Content] = useState('');
    const [mergedContent, setMergedContent] = useState('');
    const [outputFileName, setOutputFileName] = useState('merged_output.txt');
    const [error, setError] = useState<string | null>(null);
    const [loading, setLoading] = useState(false);
    const [success, setSuccess] = useState(false);

    // Function to handle file selection and content reading
    const handleFileChange = useCallback(async (event: React.ChangeEvent<HTMLInputElement>, setContent: (value: string) => void) => {
        const file = event.target.files?.[0];
        if (file) {
            try {
                const reader = new FileReader();
                reader.onload = (e) => {
                    const text = e.target?.result as string;
                    setContent(text);
                    setError(null); // Clear any previous errors
                };
                reader.onerror = () => {
                    setError(`Error reading file: ${file.name}`);
                    setContent('');
                };
                reader.readAsText(file);
            } catch (err) {
                setError(`Error processing file: ${file.name} - ${err}`);
                setContent('');
            }
        }
    }, []);

    // Function to handle merging of texts
    const handleMergeTexts = useCallback(async () => {
        if (!file1Content || !file2Content) {
            setError('Please select both files to merge.');
            setSuccess(false);
            return;
        }

        setLoading(true);
        setError(null);
        setSuccess(false);
        setMergedContent('');

        try {
            // Simulate an asynchronous operation (e.g., file processing or API call)
            await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate 1 second delay

            const mergedText = `${file1Content}\n\n${file2Content}`;
            setMergedContent(mergedText);
            setSuccess(true);
        } catch (err) {
            setError(`Error merging files: ${err}`);
            setMergedContent('');
        } finally {
            setLoading(false);
        }
    }, [file1Content, file2Content]);

    // Function to handle saving the merged text (simulated)
    const handleSaveMergedText = useCallback(async () => {
        if (!mergedContent) {
            setError('No text to save. Please merge the files first.');
            setSuccess(false);
            return;
        }

        setLoading(true);
        setError(null);
        setSuccess(false);

        try {
            // Simulate saving operation
            await new Promise(resolve => setTimeout(resolve, 1500));  // Simulate a longer delay

            // In a real application, you would trigger a download here
            // For web, you might create a blob and use a download link
            console.log(`Saving merged text to ${outputFileName}:`, mergedContent);
            setSuccess(true);
        } catch (err) {
            setError(`Error saving merged text: ${err}`);
            setSuccess(false);
        } finally {
            setLoading(false);
        }
    }, [mergedContent, outputFileName]);

    return (
        <div
            className="min-h-screen bg-gradient-to-br from-gray-100 to-gray-300 p-4 sm:p-8"
            style={{
                fontFamily: fontFamily,
            }}
        >
            <div className="max-w-4xl mx-auto space-y-6">
                <h1
                    className="text-3xl sm:text-4xl md:text-5xl font-bold text-center"
                    style={{ color: primaryColor }}
                >
                    Merge Texts
                </h1>

                <p className="text-gray-700 text-center">
                    Merge the content of two text files.
                </p>

                {/* File Selection Section */}
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
                    {/* File 1 Input */}
                    <div className="space-y-4">
                        <div
                            className="text-lg font-semibold"
                            style={{ color: secondaryColor }}
                        >
                            Select File 1:
                        </div>
                        <Input
                            type="file"
                            onChange={(e) => handleFileChange(e, setFile1Content)}
                            className="w-full"
                            accept=".txt,.log"
                            aria-label="Select File 1"
                        />
                        <Textarea
                            value={file1Content}
                            readOnly
                            placeholder="File 1 content will appear here..."
                            className="w-full h-48 bg-gray-50 border-gray-300 rounded-md shadow-sm"
                            style={{ fontFamily: 'monospace' }}
                            aria-label="File 1 Content"
                        />
                    </div>

                    {/* File 2 Input */}
                    <div className="space-y-4">
                        <div
                            className="text-lg font-semibold"
                            style={{ color: secondaryColor }}
                        >
                            Select File 2:
                        </div>
                        <Input
                            type="file"
                            onChange={(e) => handleFileChange(e, setFile2Content)}
                            className="w-full"
                            accept=".txt,.log"
                            aria-label="Select File 2"
                        />
                        <Textarea
                            value={file2Content}
                            readOnly
                            placeholder="File 2 content will appear here..."
                            className="w-full h-48 bg-gray-50 border-gray-300 rounded-md shadow-sm"
                            style={{ fontFamily: 'monospace' }}
                            aria-label="File 2 Content"
                        />
                    </div>
                </div>

                {/* Merge and Save Section */}
                <div className="space-y-6">
                    <div className="flex flex-col sm:flex-row items-center gap-4">
                        <Button
                            onClick={handleMergeTexts}
                            disabled={loading}
                            className={cn(
                                "w-full sm:w-auto px-6 py-3 rounded-full font-semibold flex items-center gap-2",
                                loading ? "bg-gray-400 text-white" :
                                    "bg-gradient-to-r from-purple-500 to-pink-500 text-white hover:from-purple-600 hover:to-pink-600",
                                "transition-all duration-300 shadow-lg hover:shadow-xl"
                            )}
                            style={{
                                fontFamily: fontFamily,
                            }}
                            aria-label="Merge Texts"
                        >
                            {loading ? (
                                <>
                                    <Loader2 className="animate-spin w-5 h-5" />
                                    Merging...
                                </>
                            ) : (
                                <>
                                    <Merge className="w-5 h-5" />
                                    Merge Texts
                                </>
                            )}
                        </Button>

                        <Input
                            type="text"
                            value={outputFileName}
                            onChange={(e) => setOutputFileName(e.target.value)}
                            placeholder="Enter output file name..."
                            className="w-full sm:w-auto"
                            aria-label="Output File Name"
                        />

                        <Button
                            onClick={handleSaveMergedText}
                            disabled={loading || !mergedContent}
                            className={cn(
                                "w-full sm:w-auto px-6 py-3 rounded-full font-semibold flex items-center gap-2",
                                (loading || !mergedContent) ? "bg-gray-400 text-white" :
                                    "bg-gradient-to-r from-green-500 to-teal-500 text-white hover:from-green-600 hover:to-teal-600",
                                "transition-all duration-300 shadow-lg hover:shadow-xl"
                            )}
                            style={{
                                fontFamily: fontFamily,
                            }}
                            aria-label="Save Merged Text"
                        >
                            {loading ? (
                                <>
                                    <Loader2 className="animate-spin w-5 h-5" />
                                    Saving...
                                </>
                            ) : (
                                <>
                                    <FilePlus className="w-5 h-5" />
                                    Save Merged Text
                                </>
                            )}
                        </Button>
                    </div>

                    {/* Merged Text Output */}
                    {mergedContent && (
                        <div className="space-y-4">
                            <div
                                className="text-lg font-semibold"
                                style={{ color: secondaryColor }}
                            >
                                Merged Text:
                            </div>
                            <Textarea
                                value={mergedContent}
                                readOnly
                                placeholder="Merged text will appear here..."
                                className="w-full h-64 bg-gray-50 border-gray-300 rounded-md shadow-sm"
                                style={{ fontFamily: 'monospace' }}
                                aria-label="Merged Text Output"
                            />
                        </div>
                    )}
                </div>

                {/* Error and Success Messages */}
                {error && (
                    <Alert variant="destructive" className="border-red-500 bg-red-50 text-red-800">
                        <AlertCircle className="h-4 w-4" />
                        <AlertTitle>Error</AlertTitle>
                        <AlertDescription>{error}</AlertDescription>
                    </Alert>
                )}

                {success && (
                    <Alert className="bg-green-50 text-green-800 border-green-500">
                        <CheckCircle className="h-4 w-4" />
                        <AlertTitle>Success</AlertTitle>
                        <AlertDescription>
                            {mergedContent ? 'Text merged successfully!' : 'Text saved successfully!'}
                        </AlertDescription>
                    </Alert>
                )}
            </div>
        </div>
    );
};

const MergetextsWebApp = () => {
    const appProps: MergeTextsProps = {
        primaryColor: 'hsl(25, 90%, 50%)',       // Peach
        secondaryColor: 'hsl(270, 60%, 80%)',    // Soft Lavender
        fontFamily: "'Manjari', sans-serif", // Manjali
    };

    // Include Google Fonts link
    return (
        <>
            <link rel="preconnect" href="https://fonts.googleapis.com" />
            <link rel="preconnect" href="https://fonts.gstatic.com" crossOrigin="true" />
            <link href="https://fonts.googleapis.com/css2?family=Manjari:wght@400;700&display=swap" rel="stylesheet" />
            <MergeTextsApp {...appProps} />
        </>
    )
};

export default MergetextsWebApp;
